// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo/v4"
)

// MockRestHandlerClient is a mock of RestHandlerClient interface.
type MockRestHandlerClient struct {
	ctrl     *gomock.Controller
	recorder *MockRestHandlerClientMockRecorder
}

// MockRestHandlerClientMockRecorder is the mock recorder for MockRestHandlerClient.
type MockRestHandlerClientMockRecorder struct {
	mock *MockRestHandlerClient
}

// NewMockRestHandlerClient creates a new mock instance.
func NewMockRestHandlerClient(ctrl *gomock.Controller) *MockRestHandlerClient {
	mock := &MockRestHandlerClient{ctrl: ctrl}
	mock.recorder = &MockRestHandlerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRestHandlerClient) EXPECT() *MockRestHandlerClientMockRecorder {
	return m.recorder
}

// GetProductByIDHandler mocks base method.
func (m *MockRestHandlerClient) GetProductByIDHandler(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByIDHandler", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetProductByIDHandler indicates an expected call of GetProductByIDHandler.
func (mr *MockRestHandlerClientMockRecorder) GetProductByIDHandler(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByIDHandler", reflect.TypeOf((*MockRestHandlerClient)(nil).GetProductByIDHandler), c)
}

// HealthCheckHandler mocks base method.
func (m *MockRestHandlerClient) HealthCheckHandler(c echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheckHandler", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// HealthCheckHandler indicates an expected call of HealthCheckHandler.
func (mr *MockRestHandlerClientMockRecorder) HealthCheckHandler(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheckHandler", reflect.TypeOf((*MockRestHandlerClient)(nil).HealthCheckHandler), c)
}
