// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	s3 "github.com/aws/aws-sdk-go/service/s3"
	gomock "github.com/golang/mock/gomock"
	redis "github.com/redis/go-redis/v9"
)

// MockProductRepository is a mock of ProductRepository interface.
type MockProductRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProductRepositoryMockRecorder
}

// MockProductRepositoryMockRecorder is the mock recorder for MockProductRepository.
type MockProductRepositoryMockRecorder struct {
	mock *MockProductRepository
}

// NewMockProductRepository creates a new mock instance.
func NewMockProductRepository(ctrl *gomock.Controller) *MockProductRepository {
	mock := &MockProductRepository{ctrl: ctrl}
	mock.recorder = &MockProductRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductRepository) EXPECT() *MockProductRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockProductRepository) Get(ctx context.Context, key string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockProductRepositoryMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProductRepository)(nil).Get), ctx, key)
}

// GetBody mocks base method.
func (m *MockProductRepository) GetBody(ctx context.Context, key string, parser interface{}) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBody", ctx, key, parser)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBody indicates an expected call of GetBody.
func (mr *MockProductRepositoryMockRecorder) GetBody(ctx, key, parser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBody", reflect.TypeOf((*MockProductRepository)(nil).GetBody), ctx, key, parser)
}

// Set mocks base method.
func (m *MockProductRepository) Set(ctx context.Context, key string, value interface{}, expiration time.Duration) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, expiration)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockProductRepositoryMockRecorder) Set(ctx, key, value, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockProductRepository)(nil).Set), ctx, key, value, expiration)
}

// MockRecordRepository is a mock of RecordRepository interface.
type MockRecordRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRecordRepositoryMockRecorder
}

// MockRecordRepositoryMockRecorder is the mock recorder for MockRecordRepository.
type MockRecordRepositoryMockRecorder struct {
	mock *MockRecordRepository
}

// NewMockRecordRepository creates a new mock instance.
func NewMockRecordRepository(ctrl *gomock.Controller) *MockRecordRepository {
	mock := &MockRecordRepository{ctrl: ctrl}
	mock.recorder = &MockRecordRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecordRepository) EXPECT() *MockRecordRepositoryMockRecorder {
	return m.recorder
}

// GetObject mocks base method.
func (m *MockRecordRepository) GetObject(obj *s3.Object) (*s3.GetObjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObject", obj)
	ret0, _ := ret[0].(*s3.GetObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObject indicates an expected call of GetObject.
func (mr *MockRecordRepositoryMockRecorder) GetObject(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockRecordRepository)(nil).GetObject), obj)
}

// ListObjectsFromBucket mocks base method.
func (m *MockRecordRepository) ListObjectsFromBucket() ([]*s3.Object, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjectsFromBucket")
	ret0, _ := ret[0].([]*s3.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjectsFromBucket indicates an expected call of ListObjectsFromBucket.
func (mr *MockRecordRepositoryMockRecorder) ListObjectsFromBucket() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectsFromBucket", reflect.TypeOf((*MockRecordRepository)(nil).ListObjectsFromBucket))
}
