// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockJobHandlerClient is a mock of JobHandlerClient interface.
type MockJobHandlerClient struct {
	ctrl     *gomock.Controller
	recorder *MockJobHandlerClientMockRecorder
}

// MockJobHandlerClientMockRecorder is the mock recorder for MockJobHandlerClient.
type MockJobHandlerClientMockRecorder struct {
	mock *MockJobHandlerClient
}

// NewMockJobHandlerClient creates a new mock instance.
func NewMockJobHandlerClient(ctrl *gomock.Controller) *MockJobHandlerClient {
	mock := &MockJobHandlerClient{ctrl: ctrl}
	mock.recorder = &MockJobHandlerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobHandlerClient) EXPECT() *MockJobHandlerClientMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockJobHandlerClient) Run(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockJobHandlerClientMockRecorder) Run(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockJobHandlerClient)(nil).Run), ctx)
}
